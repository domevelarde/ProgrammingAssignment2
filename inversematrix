## Caching the Inverse of a Matrix:
## This code computes te inverse of the matrix.
## First it creates the matrix, then calculate the inverse and finally stores it. 



makeCacheMatrix <- function(x = matrix()) {
  inv <- NULL
  set <- function(y) {
    x <<- y
   inv <<- NULL
  }
  get <- function() x
  setInverse <- function(inverse) inv <<- inverse
  getInverse <- function() inv
  list(set = set,
       get = get,
       setInverse = setInverse,
       getInverse = getInverse)
}

## This function calculates the inverse of the matrix created by the code.  

cacheSolve <- function(x, ...) {
  ## Calculate the inverse
  inv <- x$getInverse()
  if (!is.null(inv)) {
    message("inverse")
    return(inv)
  }
}
